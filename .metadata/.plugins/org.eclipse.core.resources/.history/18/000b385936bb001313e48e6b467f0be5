package be.faros.betaalplatform.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;

import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import be.faros.betaalplatform.entities.EvenementEntity;
import be.faros.betaalplatform.entities.FactuurEntity;
import be.faros.betaalplatform.entities.PersoonEntity;
import be.faros.betaalplatform.entities.RekeningEntity;
import be.faros.betaalplatform.model.Evenement;
import be.faros.betaalplatform.model.Factuur;
import be.faros.betaalplatform.model.Persoon;
import be.faros.betaalplatform.model.Rekening;
import be.faros.betaalplatform.model.Role;
import be.faros.betaalplatform.repository.EvenementRepository;
import be.faros.betaalplatform.repository.FactuurRepository;
import be.faros.betaalplatform.repository.PersoonRepository;
import be.faros.betaalplatform.repository.RekeningRepository;
import be.faros.betaalplatform.repository.RepositoryFactory;
import be.faros.betaalplatform.util.DozerConfig;

@Service
public class SaveBillServiceImp implements SaveBillService {

	private RepositoryFactory repositoryFactory = new RepositoryFactory();
	private PersoonRepository persoonRepository;
	private EvenementRepository evenementRepository;
	private RekeningRepository rekeningRepository;
	private FactuurRepository factuurRepository;
	private DozerBeanMapper mapper;

	@Autowired
	public SaveBillServiceImp(PersoonRepository persoonRepository,
			EvenementRepository evenementRepository,
			RekeningRepository rekeningRepository,
			FactuurRepository factuurRepository) {
		
		this.persoonRepository = persoonRepository;
		this.evenementRepository = (EvenementRepository) repositoryFactory.createRepostitory("evenement");
		this.rekeningRepository = rekeningRepository;
		this.factuurRepository = factuurRepository;
		DozerConfig config = new DozerConfig();
		mapper = config.getmapper();
		
	}

	@Override
	@Transactional
	public void savePersoon(Persoon p) {
		PersoonEntity pe = new PersoonEntity(p.getNaam(), p.getVoornaam(),
				p.getEmail(), p.getGeboortedatum(), p.getRole());
		persoonRepository.save(pe);
	}

	@Override
	@Transactional
	public void registreerPersoon(String naam, String voornaam, String email,
			Role role, Date geboortedatum, String wachtwoord) {
		PersoonEntity pe = new PersoonEntity(naam, voornaam, email,
				geboortedatum, role, wachtwoord);
		persoonRepository.save(pe);
	}

	@Override
	@Transactional
	public void deletePersoon(Persoon persoon) {
		// TODO Uniek email moet afgedwongen worden
		PersoonEntity pe = persoonRepository.findByEmail(persoon.getEmail());
		persoonRepository.delete(pe);
	}

	@Override
	@Transactional
	public Persoon findPersoonById(Long id) {
		PersoonEntity persoonE = persoonRepository.findById(id);
		Persoon persoon = mapper.map(persoonE, Persoon.class);
		return persoon;
	}

	@Override
	@Transactional
	public Persoon findPersoonByEmail(String email) {
		PersoonEntity persoonE = persoonRepository.findByEmail(email);
		Persoon persoon = mapper.map(persoonE, Persoon.class);
		return persoon;
	}

	@Override
	@Transactional
	public Collection<Persoon> findAllePersonen() {
		Collection<PersoonEntity> personenE = persoonRepository.findAll();
		Collection<Persoon> personen = new ArrayList<Persoon>();
		for (PersoonEntity persoonE : personenE) {
			Persoon persoon = mapper.map(persoonE, Persoon.class);
			personen.add(persoon);
		}
		return personen;
	}

	@Override
	@Transactional
	public void saveEvenement(Evenement evenement) {
		EvenementEntity evenementE = mapper.map(evenement, EvenementEntity.class);
		evenementRepository.save(evenementE);
	}

	@Override
	@Transactional
	public void deleteEvenementById(Long id) {
		EvenementEntity eventEntity = evenementRepository.findById(id);
		evenementRepository.delete(eventEntity);
	}

	@Override
	@Transactional
	public Evenement findEvenementById(Long id) {
		EvenementEntity evenementEntity = evenementRepository.findById(id);
		Evenement evenement = mapper.map(evenementEntity, Evenement.class);
		return evenement;
	}

	@Override
	@Transactional
	public Collection<Evenement> findAlleEvenementen() {
		Collection<EvenementEntity> evenementenE = evenementRepository
				.findAll();
		Collection<Evenement> evenementen = new ArrayList<Evenement>();
		for (EvenementEntity evenementEntity : evenementenE) {
			Evenement evenement = mapper.map(evenementEntity, Evenement.class);
			evenementen.add(evenement);
		}
		return evenementen;
	}

	@Override
	@Transactional
	public void saveRekening(Rekening rekening) {
		RekeningEntity rekeningEntity = rekeningRepository.findById(rekening
				.getId());
		rekeningRepository.save(rekeningEntity);
	}

	@Override
	@Transactional
	public void deleteRekeningById(Long id) {
		RekeningEntity rekeningEntity = rekeningRepository.findById(id);
		rekeningRepository.delete(rekeningEntity);
	}

	@Override
	@Transactional
	public Rekening findRekeningById(Long id) {
		RekeningEntity rekeningE = rekeningRepository.findById(id);
		Rekening rekening = mapper.map(rekeningE, Rekening.class);
		return rekening;
	}

	@Override
	@Transactional
	public Collection<Rekening> findAlleRekeningen() {
		Collection<RekeningEntity> rekeningenE = rekeningRepository.findAll();
		Collection<Rekening> rekeningen = new ArrayList<Rekening>();
		for (RekeningEntity rekeningEntity : rekeningenE) {
			Rekening rekening = mapper.map(rekeningEntity, Rekening.class);
			rekeningen.add(rekening);
		}
		return rekeningen;
	}

	@Override
	@Transactional
	public void saveFactuur(Factuur factuur) {
		FactuurEntity factuurE = mapper.map(factuur, FactuurEntity.class);
		factuurRepository.save(factuurE);
	}

	@Override
	@Transactional
	public void deleteFactuurById(Long id) {
		FactuurEntity factuurEntity = factuurRepository.findById(id);
		factuurRepository.delete(factuurEntity);
	}

	@Override
	@Transactional
	public Factuur findFactuurById(Long id) {
		FactuurEntity factuurE = factuurRepository.findById(id);
		Factuur factuur = mapper.map(factuurE, Factuur.class);
		return factuur;
	}

	@Override
	@Transactional
	public Collection<Factuur> findAlleFacturen() {
		Collection<FactuurEntity> facturenE = factuurRepository.findAll();
		Collection<Factuur> facturen = new ArrayList<>();
		for (FactuurEntity factuurE : facturenE) {
			Factuur factuur = mapper.map(factuurE, Factuur.class);
			facturen.add(factuur);
		}
		return facturen;
	}

}
